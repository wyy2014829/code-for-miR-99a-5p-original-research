Fig. 1 The computer code for the expression of miRNA from TCGA obtainment and analysis

(perl)
#!/usr/bin/perl -w
use strict;
use warnings;

my $file=$ARGV[0];

#use Data::Dumper;
use JSON;

my $json = new JSON;
my $js;

my %hash=();
my @normalSamples=();
my @tumorSamples=();

open JFILE, "$file";
while(<JFILE>) {
	$js .= "$_";
}
my $obj = $json->decode($js);
for my $i(@{$obj})
{
	      my $file_name=$i->{'file_name'};
        my $file_id=$i->{'file_id'};
        my $entity_submitter_id=$i->{'associated_entities'}->[0]->{'entity_submitter_id'};
        #print "$file_name\t$file_id\t$entity_submitter_id\n";
        if(-f "$file_id/$file_name")
        {
        	my @idArr=split(/\-/,$entity_submitter_id);
        	if($idArr[3]=~/^0/)
        	{
        		push(@tumorSamples,$entity_submitter_id);
        	}
        	else
        	{
        	  push(@normalSamples,$entity_submitter_id);
          }        	
        	open(RF,"$file_id/$file_name") or die $!;
        	while(my $line=<RF>)
        	{
        		next if($.==1);
        		chomp($line);
        		my @arr=split(/\t/,$line);
        		${$hash{$arr[0]}}{$entity_submitter_id}=$arr[3];
        	}
        	close(RF);
        }
}
#print Dumper $obj

open(WF,">miRNAmatrix.txt") or die $!;
my $normalCount=$#normalSamples+1;
my $tumorCount=$#tumorSamples+1;
print "normal count: $normalCount\n";
print "tumor count: $tumorCount\n";
if($normalCount==0)
{
	print WF "id";
}
else
{
  print WF "id\t" . join("\t",@normalSamples);
}
print WF "\t" . join("\t",@tumorSamples) . "\n";
foreach my $key(keys %hash)
{
	print WF $key;
	foreach my $normal(@normalSamples)
	{
		print WF "\t" . ${$hash{$key}}{$normal};
	}
	foreach my $tumor(@tumorSamples)
	{
		print WF "\t" . ${$hash{$key}}{$tumor};
	}
	print WF "\n";
}
close(WF);


(R studio)
rm(list = ls())

#???ð?
library(limma)
library(pheatmap)

logFCfilter=1              #logFC?Ĺ???????
adj.P.Val.Filter=0.05      #??????pֵ?Ĺ???????
inputFile="miRNA.RPM.txt"      #?????????ļ?
setwd("C:\\Users\\yueyuan\\Desktop\\miRNA\\2")      #???ù???Ŀ¼

#??ȡ?????ļ????????????ļ?????
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
Type=sapply(strsplit(colnames(data),"\\-"),"[",4)
Type=sapply(strsplit(Type,""),"[",1)
Type=gsub("2", "1", Type)
#正常和肿瘤数目
group=sapply(strsplit(colnames(data),"\\-"),"[",4)
group=sapply(strsplit(group,""),"[",1)
group=gsub("2", "1", group)
conNum=length(group[group==1])       #正常组样品数目
treatNum=length(group[group==0])     #肿瘤组样品数目


data=data[,order(Type,decreasing = T)]       #根据样品的分组信息对样品进行排序
Type=c(rep("Normal",conNum), rep("Tumor",treatNum))


#????????
design <- model.matrix(~0+factor(Type))
colnames(design) <- c("Normal","Tumor")
fit <- lmFit(data,design)
cont.matrix<-makeContrasts(Tumor-Normal,levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

#???????л????Ĳ???????
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut, file="all.txt", sep="\t", quote=F, col.names=F)

#?????????Ĳ???????
diffSig=allDiff[with(allDiff, (abs(logFC)>logFCfilter & adj.P.Val < adj.P.Val.Filter )), ]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut, file="diff.txt", sep="\t", quote=F, col.names=F)

#????????????????  
diffGeneExp=data[row.names(diffSig),]
diffGeneExpOut=rbind(id=paste0(colnames(diffGeneExp),"_",Type), diffGeneExp)
write.table(diffGeneExpOut, file="diffGeneExp.txt", sep="\t", quote=F, col.names=F)

#???Ʋ?????????ͼ
geneNum=30  #显示在热图里的基因数目
diffUp=diffSig[diffSig$logFC>0,]
diffDown=diffSig[diffSig$logFC<0,]
geneUp=row.names(diffUp)
geneDown=row.names(diffDown)
if(nrow(diffUp)>geneNum){geneUp=row.names(diffUp)[1:geneNum]}
if(nrow(diffDown)>geneNum){geneDown=row.names(diffDown)[1:geneNum]}
hmExp=data[c(geneUp,geneDown),]
#׼??ע???ļ?
names(Type)=colnames(data)
Type=as.data.frame(Type)
#????ͼ??
pdf(file="heatmap.pdf", width=15, height=7)
pheatmap(hmExp, 
         annotation=Type, 
         color = colorRampPalette(c(rep("blue",8), "white", rep("red",8)))(50),
         cluster_cols =F,
         show_colnames = F,
         scale="row",
         fontsize = 8,
         fontsize_row=6,
         fontsize_col=8)
dev.off()

#绘制火山图
library(ggplot2)
library(ggpubr)
library(ggthemes)


deg$logP <- -log10(deg$P.Value)
ggscatter(deg,
          x = "logFC", y = "logP") +
  theme_base()

#增加基因上下调信息
ggscatter(deg, x = "logFC", y = "logP",
          color = "change",
          palette = c("blue", "black", "red"),
          size = 1) +
  theme_base()

#添加分界线
ggscatter(deg, x = "logFC", y = "logP", xlab = "logFC",
          ylab = "-log10(adj.P.Val)",
          color = "change",
          palette = c("blue", "black", "red"),
          size = 1) +
  theme_base() +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed")
dev.off()

deg$Label = ""   #新加一列label
deg <- deg[order(deg$P.Value), ]   #对差异基因的p值进行从小到大的排序
deg$Gene <- rownames(deg)
#高表达的基因中，选择fdr值最小的5个
up.genes <- head(deg$Gene[which(deg$change == "up")], 15)
#低表达的基因中，选择fdr值最小的5个
down.genes <- head(deg$Gene[which(deg$change == "down")], 15)
#将up.genes和down.genes合并，并加入到Label中
deg.top15.genes <- c(as.character(up.genes), as.character(down.genes))
deg$Label[match(deg.top15.genes, deg$Gene)] <- deg.top15.genes

ggscatter(deg, x = "logFC", y = "logP",
          color = "change",
          palette = c("blue", "black", "red"),
          size = 0.5,
          label = deg$Label,
          font.label = c(12,"black"),
          repel = T,
          xlab = "logFC",
          ylab = "-log10(adj.P.Val)") +
  theme_base() +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed")+ xlim(-log10(1000),log10(1000)) + ylim(1,100)


ggsave("Rplot2.tiff",width = 9, height = 9, dpi = 300,limitsize = FALSE)

dev.off()



Fig. 2 and 3 The computer code for the expression of CDC25A and CDK7 from TCGA obtainment and analysis

(perl)
#!/usr/bin/perl -w
use strict;
use warnings;

my $file=$ARGV[0];

#use Data::Dumper;
use JSON;

my $json = new JSON;
my $js;

my %hash=();
my @normalSamples=();
my @tumorSamples=();

open JFILE, "$file";
while(<JFILE>) {
	$js .= "$_";
}
my $obj = $json->decode($js);
for my $i(@{$obj}){
	      my $file_name=$i->{'file_name'};
        my $file_id=$i->{'file_id'};
        my $entity_submitter_id=$i->{'associated_entities'}->[0]->{'entity_submitter_id'};
        if(-f $file_name){
        	my @idArr=split(/\-/,$entity_submitter_id);
        	if($idArr[3]=~/^0/){
        		push(@tumorSamples,$entity_submitter_id);
        	}else{
        	  	push(@normalSamples,$entity_submitter_id);
          	}        	
        	open(RF,"$file_name") or die $!;
        	while(my $line=<RF>){
        		next if($line=~/GENCODE/);
        		next if($line=~/^N_unmapped/);
		next if($line=~/^N_multimapping/);
		next if($line=~/^N_noFeature/);
		next if($line=~/^N_ambiguous/);
		next unless($line=~/protein_coding/);   #若想输出全基因就删除这一行
        		chomp($line);
        		my @arr=split(/\t/,$line);
		#my @arr_12=(@arr[1],@arr[2])
		#my $conbine=join("\t",@arr_12);
		#${$hash{$conbine}}{$entity_submitter_id}=$arr[7];
        		${$hash{$arr[1]}}{$entity_submitter_id}=$arr[7];       #$arr[7]控制着输出列
        	}
        	close(RF);
        }
}
#print Dumper $obj

open(WF,">mRNAmatrix.txt") or die $!;
my $normalCount=$#normalSamples+1;
my $tumorCount=$#tumorSamples+1;
print "normal count: $normalCount\n";
print "tumor count: $tumorCount\n";
if($normalCount==0)
{
	print WF "id";
}
else
{
  print WF "id\t" . join("\t",@normalSamples);
}
print WF "\t" . join("\t",@tumorSamples) . "\n";
foreach my $key(keys %hash){
	print WF $key;
	foreach my $normal(@normalSamples)
	{
		print WF "\t" . ${$hash{$key}}{$normal};
	}
	foreach my $tumor(@tumorSamples)
	{
		print WF "\t" . ${$hash{$key}}{$tumor};
	}
	print WF "\n";
}
close(WF);

(R studio)
rm(list = ls())

#引用包
library(limma)
library(pheatmap)

logFCfilter=1              #logFC的过滤条件
adj.P.Val.Filter=0.05      #矫正后p值的过滤条件
inputFile="mRNAmatrix.txt"     #表达数据文件
setwd("D:\\TCGA transforming\\BRCA\\files")      #设置工作目录
#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)

rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
Type=sapply(strsplit(colnames(data),"\\-"),"[",4)
Type=sapply(strsplit(Type,""),"[",1)
Type=gsub("2", "1", Type)
#正常和肿瘤数目
group=sapply(strsplit(colnames(data),"\\-"),"[",4)
group=sapply(strsplit(group,""),"[",1)
group=gsub("2", "1", group)
conNum=length(group[group==1])       #正常组样品数目
treatNum=length(group[group==0])     #肿瘤组样品数目


data=data[,order(Type,decreasing = T)]       #根据样品的分组信息对样品进行排序
Type=c(rep("Normal",conNum), rep("Tumor",treatNum))

#差异分析
design <- model.matrix(~0+factor(Type))
colnames(design) <- c("Normal","Tumor")
fit <- lmFit(data,design)
cont.matrix<-makeContrasts(Tumor-Normal,levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

#输出所有基因的差异情况
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut, file="all.txt", sep="\t", quote=F, col.names=F)

#输出显著的差异基因
diffSig=allDiff[with(allDiff, (abs(logFC)>logFCfilter & adj.P.Val < adj.P.Val.Filter )), ]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut, file="diff.txt", sep="\t", quote=F, col.names=F)

#输出差异基因表达量
diffGeneExp=data[row.names(diffSig),]
diffGeneExpOut=rbind(id=paste0(colnames(diffGeneExp),"_",Type), diffGeneExp)
write.table(diffGeneExpOut, file="diffGeneExp.txt", sep="\t", quote=F, col.names=F)

The target gene (CDC25A/CDK7) is selected, then analyzed via graphpad software.

Fig. 1 miR-99a-5p clinical data from TCGA (Xena)

 The PFS data from xena has been downloaded previously. 
(R studio)
#临床样本K-M生存分析
install.packages("survival")
install.packages("survminer")
install.packages("gridtext")

library("survival")
library("survminer")
library("gridtext")

#工作目录
setwd("D:\\TCGA transforming\\Xena补充全癌种DFS")

#引用包
library(limma)

tcgaExpFile="time.txt"      #TCGA_mrna表达数据文件
#geoExpFile="miRNA.RPM.txt"    #TCGA_miRNA表达数据文件
#geneFile="diff.txt"           #基因列表文件

#读取TCGA基因表达文件,并对数据进行处理
rt=read.table(tcgaExpFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
tcga=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)

#删掉正常样品
group=sapply(strsplit(rownames(tcga),"\\-"), "[", 4)
group=sapply(strsplit(group,""), "[", 1)
group=gsub("2", "1", group)
tcga=tcga[group==0,]
rownames(tcga)=gsub("\\.","\\-", rownames(tcga))
tcga=as.data.frame(tcga)
write.table(tcga, file="BRCA_DFI_time.txt", sep="\t", quote=F, col.names=T)
#以记事本模式打开，首行输入id+tab键

#读入生存数据
cli=read.table("BRCA_DFI_time.txt", header= T,sep="\t",check.names= F, row.names = 1)
#生存时间以年为单位
cli$time=cli$time/365


#读取输入文件
data=read.table("miRNA.RPM.txt", header= T,sep="\t",check.names= F, row.names = 1)
#转化为matrix
dimnames= list(rownames(data),colnames(data))
data=matrix(as.numeric(as.matrix(data)),nrow=nrow(data),dimnames = dimnames)
#转置
data=t(data)
#因为生存数据只保留前12个字符，故样本名仅保留前12个字符
rownames(data)=substr(rownames(data),1,15)

#将，改为-。gsub用于替换
rownames(data)=gsub("[.]","-",rownames(data))

data=as.data.frame(data)
#将，改为-。gsub用于替换
rownames(data)=gsub("[.]","-",rownames(data))

#取共有的样本进行合并
#获取共同样本
sameSample=intersect(row.names(data),row.names(cli))
#提取共同样本
data=data[sameSample,]
cli=cli[sameSample,]

#合并
rt=cbind(cli,data)


#summary(fit):没有达到中位生存时间时可查看更多数据


#取最佳cutoff值
res.cut <- surv_cutpoint(rt, #数据集
                         time = "time", #生存状态
                         event = "fustat", #生存时间
                         variables = c("hsa-miR-99a-5p") #需要计算的数据列名
)

summary(res.cut)

res.cat <- surv_categorize(res.cut)
head(res.cat)

fit <- survfit(Surv(time, fustat) ~rt[,"hsa-miR-99a-5p"], data = res.cat)#拟合生存分析
#绘制生存曲线并显示P值
ggsurvplot(fit,
           data = res.cat,
           risk.table = TRUE,
           pval = T)



#根据ABCA3表达量的中位值，把样品分为两组
group=ifelse(rt[,"hsa-miR-99a-5p"]>quantile(rt[,"hsa-miR-99a-5p"],seq(0,1,1/7.15))[2],"High","Low")
#group=ifelse(rt[,"ABCA3"]>quantile(rt[,"ABCA3"],seq(0,1,1/2))[2],"High","Low")
rt[,"group"]=group
length=length(levels(factor(group)))

#生存分析
diff=survdiff(Surv(time,fustat) ~group,data =rt)
pValue=1-pchisq(diff$chisq,df=length-1)
pValue=paste0("p=",sprintf("%.04f",pValue))
fit <- survfit(Surv(time,fustat)~group,data =rt)

#summary(fit):没有达到中位生存时间时可查看更多数据

#绘制生存曲线
#install.packages("survRM2")
library(survRM2)
library (survminer) 
library(ggplot2)
bioCol=c("Firebrick3","medium blue","#6E568C","#223D6C")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit,
                   data=rt,
                   conf.int=F,
                   pval=pValue,
                   pval.size=5,
                   legend.title="hsa-miR-99a-5p",
                   legned.labs=levels(factor(rt[,"group"])),
                   legend=c(0.8,0.225),
                   font.legend=10,
                   xlab="Time(years)",
                   ylab="DFS",#DRFS:distant-relapse free survival
                   break.time.by=2,
                   palette=bioCol,
                   surv.median.line = "hv",
                   risk.table=T,
                   cumevents=F,
                   risk.table.height=.3)
#输出图形
pdf(file = "TCGA_miR-99a-5p_survival.pdf",width = 7,height = 5,onefile=FALSE)
print(surPlot)
dev.off()
#garbage <- dev.off()


Fig. 2 CDC25A clinical data from TCGA 
(perl)
use strict;
use warnings;
#use File::Basename;
use XML::Simple;
#use Data::Dumper;

my @dirs=glob("*");
open(WF,">clinical.xls") or die $!;
print WF "Id\tfutime\tfustat\tage\tgender\trace\tgrade\tstage\tT\tM\tN\tcancerType\n";
foreach my $dir(@dirs){
	if(-d $dir){
	  opendir(RD,"$dir") or die $!;
	  while(my $xmlfile=readdir(RD)){
	  	if($xmlfile=~/\.xml$/){
	  		#print "$dir\\$xmlfile\n";
				my $userxs = XML::Simple->new(KeyAttr => "name");
				my $userxml = $userxs->XMLin("$dir\\$xmlfile");
				# print output
				#open(WF,">dumper.txt") or die $!;
				#print WF Dumper($userxml);
				#close(WF);
				my $disease_code=$userxml->{'admin:admin'}{'admin:disease_code'}{'content'};   #get disease code
				my $disease_code_lc=lc($disease_code);
				my $patient_key=$disease_code_lc . ':patient';                                #ucec:patient
				my $follow_key=$disease_code_lc . ':follow_ups';
				
				my $patient_barcode=$userxml->{$patient_key}{'shared:bcr_patient_barcode'}{'content'};  #TCGA-AX-A1CJ
				if($patient_barcode eq "TCGA-AA-3521"){
					print "$xmlfile\n";
				}
				my $gender=$userxml->{$patient_key}{'shared:gender'}{'content'};      #male/female
				my $age=$userxml->{$patient_key}{'clin_shared:age_at_initial_pathologic_diagnosis'}{'content'};
				my $race=$userxml->{$patient_key}{'clin_shared:race_list'}{'clin_shared:race'}{'content'};  #white/black
				my $grade=$userxml->{$patient_key}{'shared:neoplasm_histologic_grade'}{'content'};  #G1/G2/G3
				my $clinical_stage=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:clinical_stage'}{'content'};  #stage I
				my $clinical_T=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:clinical_categories'}{'shared_stage:clinical_T'}{'content'};
				my $clinical_M=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:clinical_categories'}{'shared_stage:clinical_M'}{'content'};
				my $clinical_N=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:clinical_categories'}{'shared_stage:clinical_N'}{'content'};
				my $pathologic_stage=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:pathologic_stage'}{'content'};  #stage I
				my $pathologic_T=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:pathologic_categories'}{'shared_stage:pathologic_T'}{'content'};
				my $pathologic_M=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:pathologic_categories'}{'shared_stage:pathologic_M'}{'content'};
				my $pathologic_N=$userxml->{$patient_key}{'shared_stage:stage_event'}{'shared_stage:tnm_categories'}{'shared_stage:pathologic_categories'}{'shared_stage:pathologic_N'}{'content'};
				$gender=(defined $gender)?$gender:"unknow";
				$age=(defined $age)?$age:"unknow";
				$race=(defined $race)?$race:"unknow";
				$grade=(defined $grade)?$grade:"unknow";
				$clinical_stage=(defined $clinical_stage)?$clinical_stage:"unknow";
				$clinical_T=(defined $clinical_T)?$clinical_T:"unknow";
				$clinical_M=(defined $clinical_M)?$clinical_M:"unknow";
				$clinical_N=(defined $clinical_N)?$clinical_N:"unknow";
				$pathologic_stage=(defined $pathologic_stage)?$pathologic_stage:"unknow";
				$pathologic_T=(defined $pathologic_T)?$pathologic_T:"unknow";
				$pathologic_M=(defined $pathologic_M)?$pathologic_M:"unknow";
				$pathologic_N=(defined $pathologic_N)?$pathologic_N:"unknow";
				
				my $survivalTime="";
				my $vital_status=$userxml->{$patient_key}{'clin_shared:vital_status'}{'content'};
				my $followup=$userxml->{$patient_key}{'clin_shared:days_to_last_followup'}{'content'};
				my $death=$userxml->{$patient_key}{'clin_shared:days_to_death'}{'content'};
				if($vital_status eq 'Alive'){
					$survivalTime="$followup\t0";
				}
				else{
					$survivalTime="$death\t1";
				}
				for my $i(keys %{$userxml->{$patient_key}{$follow_key}}){
					my @survivalArr=split(/\t/,$survivalTime);
					eval{
						$followup=$userxml->{$patient_key}{$follow_key}{$i}{'clin_shared:days_to_last_followup'}{'content'};
						$vital_status=$userxml->{$patient_key}{$follow_key}{$i}{'clin_shared:vital_status'}{'content'};
						$death=$userxml->{$patient_key}{$follow_key}{$i}{'clin_shared:days_to_death'}{'content'};
				  };
				  if($@){
					  $followup=$userxml->{$patient_key}{$follow_key}{$i}[0]{'clin_shared:days_to_last_followup'}{'content'};
						$vital_status=$userxml->{$patient_key}{$follow_key}{$i}[0]{'clin_shared:vital_status'}{'content'};
						$death=$userxml->{$patient_key}{$follow_key}{$i}[0]{'clin_shared:days_to_death'}{'content'};
				  }
					if($vital_status eq 'Alive'){
						if($followup>$survivalArr[0]){
					    $survivalTime="$followup\t0";
					  }
				  }
				  else{
				  	if($death>$survivalArr[0]){
					    $survivalTime="$death\t1";
					  }
				  }
				}
				print WF "$patient_barcode\t$survivalTime\t$age\t$gender\t$race\t$grade\t$pathologic_stage\t$pathologic_T\t$pathologic_M\t$pathologic_N\t$disease_code\n";
			}
		}
		close(RD);
	}
}
close(WF);

(R studio)
#临床样本K-M生存分析
install.packages("survival")
install.packages("survminer")
install.packages("gridtext")

library("survival")
library("survminer")
library("gridtext")

#工作目录
setwd("D:\\TCGA transforming\\mrna tcga os")

#读入生存数据
cli=read.table("timeos.txt", header= T,sep="\t",check.names= F, row.names = 1)
#生存时间以年为单位
cli$time=cli$time/365


#读取输入文件
data=read.table("BRCA_counts_mRNA.RPM_01.txt", header= T,sep="\t",check.names= F, row.names = 1)
#转化为matrix
dimnames= list(rownames(data),colnames(data))
data=matrix(as.numeric(as.matrix(data)),nrow=nrow(data),dimnames = dimnames)
#转置
data=t(data)
#因为生存数据只保留前12个字符，故样本名仅保留前12个字符
rownames(data)=substr(rownames(data),1,12)

#将，改为-。gsub用于替换
rownames(data)=gsub("[.]","-",rownames(data))

#取共有的样本进行合并
#获取共同样本
sameSample=intersect(row.names(data),row.names(cli))
#提取共同样本
data=data[sameSample,]
cli=cli[sameSample,]

#合并
rt=cbind(cli,data)
#取最适cutoff值
res.cut <- surv_cutpoint(rt, #数据集
                         time = "time", #生存状态
                         event = "fustat", #生存时间
                         variables = c("CDC25A") #需要计算的数据列名
)
summary(res.cut) 

res.cat <- surv_categorize(res.cut)
head(res.cat)

fit <- survfit(Surv(time, fustat) ~CDC25A, data = res.cat)#拟合生存分析
#绘制生存曲线并显示P值
surPlot=ggsurvplot(fit,
                   data = res.cat,
                   risk.table = TRUE,
                   pval = T)



#根据ABCA3表达量的中位值，把样品分为两组
group=ifelse(rt[,"CDC25A"]>quantile(rt[,"CDC25A"],seq(0,1,1/4.155))[2],"High","Low")
#group=ifelse(rt[,"ABCA3"]>quantile(rt[,"ABCA3"],seq(0,1,1/2))[2],"High","Low")
rt[,"group"]=group
length=length(levels(factor(group)))

#生存分析
diff=survdiff(Surv(time,fustat) ~group,data =rt)
pValue=1-pchisq(diff$chisq,df=length-1)
pValue=paste0("p=",sprintf("%.04f",pValue))
fit <- survfit(Surv(time,fustat)~group,data =rt)

#summary(fit):没有达到中位生存时间时可查看更多数据

#绘制生存曲线
#install.packages("survRM2")
library(survRM2)
library (survminer) 
bioCol=c("Firebrick3","medium blue","#6E568C","#223D6C")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit,
                   data=rt,
                   conf.int=F,
                   pval=pValue,
                   pval.size=5,
                   legend.title="CDC25A",
                   legned.labs=levels(factor(rt[,"group"])),
                   legend=c(0.8,0.225),
                   font.legend=10,
                   xlab="Time(years)",
                   ylab="OS",
                   break.time.by=2,
                   palette=bioCol,
                   surv.median.line = "hv",
                   risk.table=T,
                   cumevents=F,
                   risk.table.height=.25)
#输出图形
pdf(file = "CDC25A OS survival.pdf",width = 7,height = 6,onefile=TRUE)
print(surPlot)
garbage <- dev.off()
                   
Fig.1 The computer code for the expression of miRNA from GSE7842 obtainment and analysis

(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix.txt";	#输入文件名
my $gplFile="GPL5173.txt";	#平台文件名
my $expFileWF="probe.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);


(R studio)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")

#install.packages("pheatmap")
#install.packages("ggplot2")


#引用包
library(limma)
library(pheatmap)
library(ggplot2)

inputFile="probe.txt"     #表达数据文件
conFile="s1.txt"               #对照组的样品信息文件
treatFile="s2.txt"             #实验组的样品信息文件
logFCfilter=0.585                 #logFC过滤条件(logFC=0.585,差异倍数1.5倍;logFC=1,差异2倍;logFC=2,差异4倍)
adj.P.Val.Filter=0.05          #矫正后p值的过滤条件

geoID="GSE7842"              #GEO数据库研究的id
conName="Control"              #对照组的名称
treatName="Tumor"              #实验组的名称
setwd("D:\\GEO expr diff\\gse7842\\GSE7842_series_matrix.txt")      #设置工作目录

#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
rt=data[rowMeans(data)>0,]

#如果数据没有取log2, 会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)

#读取样品信息的文件(对照组和实验组)
sample1=read.table(conFile, header=F, sep="\t", check.names=F)
sample2=read.table(treatFile, header=F, sep="\t", check.names=F)
sampleName1=gsub("^ | $", "", as.vector(sample1[,1]))
sampleName2=gsub("^ | $", "", as.vector(sample2[,1]))
conData=data[,sampleName1]
treatData=data[,sampleName2]
data=cbind(conData,treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)

#差异分析
Type=c(rep("con",conNum), rep("treat",treatNum))
design <- model.matrix(~0+factor(Type))
colnames(design) <- c("con","treat")
fit <- lmFit(data,design)
cont.matrix<-makeContrasts(treat-con,levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

#输出所有基因的差异结果
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut,file=paste0(geoID,".all.txt"),sep="\t",quote=F,col.names=F)

#输出所有基因矫正后的表达量
Type=c(rep(conName,conNum),rep(treatName,treatNum))
outData=rbind(id=paste0(colnames(data),"_",Type),data)
write.table(treatData,file=paste0(geoID,".normalize.txt"),sep="\t",quote=F,col.names=T)

#对差异结果进行过滤,输出显著的差异基因
diffSig=allDiff[with(allDiff, (abs(logFC)>logFCfilter & adj.P.Val < adj.P.Val.Filter )), ]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut,file=paste0(geoID,".diff.txt"),sep="\t",quote=F,col.names=F)



#绘制差异基因热图
geneNum=30    #定义展示基因的数目
diffUp=diffSig[diffSig$logFC>0,]
diffDown=diffSig[diffSig$logFC<0,]
geneUp=row.names(diffUp)
geneDown=row.names(diffDown)
if(nrow(diffUp)>geneNum){geneUp=row.names(diffUp)[1:geneNum]}
if(nrow(diffDown)>geneNum){geneDown=row.names(diffDown)[1:geneNum]}
hmExp=data[c(geneUp,geneDown),]
#准备注释文件
names(Type)=colnames(data)
Type=as.data.frame(Type)
#输出图形
pdf(file="heatmap.pdf", width=10, height=2.5)
pheatmap(hmExp, 
         annotation=Type, 
         color = colorRampPalette(c(rep("blue",2), "white", rep("red",2)))(50),
         cluster_cols =F,
         show_colnames = F,
         scale="row",
         fontsize = 8,
         fontsize_row=6,
         fontsize_col=8)
dev.off()

Fig. 1 The computer code for the expression of miRNA from GSE59247 obtainment and analysis

(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix.txt";	#输入文件名
my $gplFile="GPL5173.txt";	#平台文件名
my $expFileWF="probe.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);

(R studio)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")

#install.packages("pheatmap")
#install.packages("ggplot2")


#引用包
library(limma)
library(pheatmap)
library(ggplot2)

inputFile="matrix.txt"     #表达数据文件
conFile="s1.txt"               #对照组的样品信息文件
treatFile="s2.txt"             #实验组的样品信息文件
logFCfilter=0.585                 #logFC过滤条件(logFC=0.585,差异倍数1.5倍;logFC=1,差异2倍;logFC=2,差异4倍)
adj.P.Val.Filter=0.05          #矫正后p值的过滤条件

geoID="GSE59247"              #GEO数据库研究的id
conName="Control"              #对照组的名称
treatName="Tumor"              #实验组的名称
setwd("D:\\GEO expr diff\\gse59247 mirna 有统计学意义\\GSE59247_series_matrix.txt")      #设置工作目录

#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
rt=data[rowMeans(data)>0,]

#如果数据没有取log2, 会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)

#读取样品信息的文件(对照组和实验组)
sample1=read.table(conFile, header=F, sep="\t", check.names=F)
sample2=read.table(treatFile, header=F, sep="\t", check.names=F)
sampleName1=gsub("^ | $", "", as.vector(sample1[,1]))
sampleName2=gsub("^ | $", "", as.vector(sample2[,1]))
conData=data[,sampleName1]
treatData=data[,sampleName2]
data=cbind(conData,treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)

#差异分析
Type=c(rep("con",conNum), rep("treat",treatNum))
design <- model.matrix(~0+factor(Type))
colnames(design) <- c("con","treat")
fit <- lmFit(data,design)
cont.matrix<-makeContrasts(treat-con,levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

#输出所有基因的差异结果
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut,file=paste0(geoID,".all.txt"),sep="\t",quote=F,col.names=F)

#输出所有基因矫正后的表达量
Type=c(rep(conName,conNum),rep(treatName,treatNum))
outData=rbind(id=paste0(colnames(data),"_",Type),data)
write.table(outData,file=paste0(geoID,".normalize.txt"),sep="\t",quote=F,col.names=T)

#对差异结果进行过滤,输出显著的差异基因
diffSig=allDiff[with(allDiff, (abs(logFC)>logFCfilter & adj.P.Val < adj.P.Val.Filter )), ]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut,file=paste0(geoID,".diff.txt"),sep="\t",quote=F,col.names=F)



#绘制差异基因热图
geneNum=30    #定义展示基因的数目
diffUp=diffSig[diffSig$logFC>0,]
diffDown=diffSig[diffSig$logFC<0,]
geneUp=row.names(diffUp)
geneDown=row.names(diffDown)
if(nrow(diffUp)>geneNum){geneUp=row.names(diffUp)[1:geneNum]}
if(nrow(diffDown)>geneNum){geneDown=row.names(diffDown)[1:geneNum]}
hmExp=data[c(geneUp,geneDown),]
#准备注释文件
names(Type)=colnames(data)
Type=as.data.frame(Type)
#输出图形
pdf(file="heatmap.pdf", width=10, height=5)
pheatmap(hmExp, 
         annotation=Type, 
         color = colorRampPalette(c("blue", "white", "red"))(50),
         cluster_cols =F,
         show_colnames = F,
         scale="row",
         fontsize = 8,
         fontsize_row=6,
         fontsize_col=8)
dev.off()


Fig. 1 miR-99a-5p clinical data from GSE22216

(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix_miRNA.txt";	#输入文件名
my $gplFile="miRNA_mRNA.txt";	#平台文件名
my $expFileWF="associations.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);

(R studio)
#miR-99a-5p DRFS分析 GSE22216 文件中mir-99a-5p对应mir-99a

#临床样本K-M生存分析
install.packages("survival")
install.packages("survminer")
install.packages("gridtext")

library("survival")
library("survminer")
library("gridtext")

#工作目录
setwd("D:\\GEO data\\practice\\GSE22216_series_matrix.txt")

#读入生存数据
cli=read.table("time.txt", header= T,sep="\t",check.names= F, row.names = 1)
#生存时间以年为单位
#cli$time=cli$time/365


#读取输入文件
data=read.table("GSE22216.normalize.txt", header= T,sep="\t",check.names= F, row.names = 1)
#转化为matrix
dimnames= list(rownames(data),colnames(data))
data=matrix(as.numeric(as.matrix(data)),nrow=nrow(data),dimnames = dimnames)
#转置
data=t(data)
#因为生存数据只保留前12个字符，故样本名仅保留前12个字符
#rownames(data)=substr(rownames(data),1,12)

#将，改为-。gsub用于替换
#rownames(data)=gsub("[.]","-",rownames(data))

#取共有的样本进行合并
#获取共同样本
sameSample=intersect(row.names(data),row.names(cli))
#提取共同样本
data=data[sameSample,]
cli=cli[sameSample,]

#合并
rt=cbind(cli,data)

#取最适cutoff值
res.cut <- surv_cutpoint(rt, #数据集
                         time = "time", #生存状态
                         event = "fustat", #生存时间
                         variables = c("hsa-miR-99a") #需要计算的数据列名
)
summary(res.cut) 

res.cat <- surv_categorize(res.cut)
head(res.cat)

#fit <- survfit(Surv(time, fustat) ~(rt[,"hsa-miR-99a"]), data = res.cat)#拟合生存分析绘制生存曲线并显示P值
#surPlot=ggsurvplot(fit,
                   #data = res.cat,
                   #risk.table = TRUE,
                   #pval = T)

#根据ABCA3表达量的中位值，把样品分为两组
group=ifelse(rt[,"hsa-miR-99a"]>quantile(rt[,"hsa-miR-99a"],seq(0,1,1/4))[2],"High","Low")
#group=ifelse(rt[,"ABCA3"]>quantile(rt[,"ABCA3"],seq(0,1,1/2))[2],"High","Low")
rt[,"group"]=group
length=length(levels(factor(group)))

#生存分析
diff=survdiff(Surv(time,fustat) ~group,data =rt)
pValue=1-pchisq(diff$chisq,df=length-1)
pValue=paste0("p=",sprintf("%.04f",pValue))
fit <- survfit(Surv(time,fustat)~group,data =rt)

#summary(fit):没有达到中位生存时间时可查看更多数据

#绘制生存曲线
#install.packages("survRM2")
library(survRM2)
library (survminer) 
library(ggplot2)
bioCol=c("Firebrick3","medium blue","#6E568C","#223D6C")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit,
                   data=rt,
                   conf.int=F,
                   pval=pValue,
                   pval.size=5,
                   legend.title="hsa-miR-99a-5p",
                   legned.labs=levels(factor(rt[,"group"])),
                   legend=c(0.8,0.225),
                   font.legend=10,
                   xlab="Time(years)",
                   ylab="DRFS",#DRFS:distant-relapse free survival
                   break.time.by=2,
                   palette=bioCol,
                   surv.median.line = "hv",
                   risk.table=T,
                   cumevents=F,
                   risk.table.height=.3)
#输出图形
pdf(file = "survival.pdf",width = 7,height = 5,onefile=FALSE)
print(surPlot)
dev.off()
#garbage <- dev.off()


Fig.2 CDC25A expression data from GSE29044

(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix.txt";	#输入文件名
my $gplFile="GPL570-55999.txt";	#平台文件名
my $expFileWF="probe.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);

(R studio)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")

#install.packages("pheatmap")
#install.packages("ggplot2")


#引用包
library(limma)
library(pheatmap)
library(ggplot2)

inputFile="probe.txt"     #表达数据文件
conFile="s1.txt"               #对照组的样品信息文件
treatFile="s2.txt"             #实验组的样品信息文件
logFCfilter=0.585                 #logFC过滤条件(logFC=0.585,差异倍数1.5倍;logFC=1,差异2倍;logFC=2,差异4倍)
adj.P.Val.Filter=0.05          #矫正后p值的过滤条件

geoID="GSE29044"              #GEO数据库研究的id
conName="Control"              #对照组的名称
treatName="Tumor"              #实验组的名称
setwd("D:\\GEO expr diff\\GSE29044-GPL570_series_matrix.txt")      #设置工作目录

#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
rt=data[rowMeans(data)>0,]

#如果数据没有取log2, 会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)

#读取样品信息的文件(对照组和实验组)
sample1=read.table(conFile, header=F, sep="\t", check.names=F)
sample2=read.table(treatFile, header=F, sep="\t", check.names=F)
sampleName1=gsub("^ | $", "", as.vector(sample1[,1]))
sampleName2=gsub("^ | $", "", as.vector(sample2[,1]))
conData=data[,sampleName1]
treatData=data[,sampleName2]
data=cbind(conData,treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)

#差异分析
Type=c(rep("con",conNum), rep("treat",treatNum))
design <- model.matrix(~0+factor(Type))
colnames(design) <- c("con","treat")
fit <- lmFit(data,design)
cont.matrix<-makeContrasts(treat-con,levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

#输出所有基因的差异结果
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut,file=paste0(geoID,".all.txt"),sep="\t",quote=F,col.names=F)

#输出所有基因矫正后的表达量
Type=c(rep(conName,conNum),rep(treatName,treatNum))
outData=rbind(id=paste0(colnames(data),"_",Type),data)
write.table(outData,file=paste0(geoID,".normalize.txt"),sep="\t",quote=F,col.names=T)

#对差异结果进行过滤,输出显著的差异基因
diffSig=allDiff[with(allDiff, (abs(logFC)>logFCfilter & adj.P.Val < adj.P.Val.Filter )), ]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut,file=paste0(geoID,".diff.txt"),sep="\t",quote=F,col.names=F)



#绘制差异基因热图
geneNum=30    #定义展示基因的数目
diffUp=diffSig[diffSig$logFC>0,]
diffDown=diffSig[diffSig$logFC<0,]
geneUp=row.names(diffUp)
geneDown=row.names(diffDown)
if(nrow(diffUp)>geneNum){geneUp=row.names(diffUp)[1:geneNum]}
if(nrow(diffDown)>geneNum){geneDown=row.names(diffDown)[1:geneNum]}
hmExp=data[c(geneUp,geneDown),]
#准备注释文件
names(Type)=colnames(data)
Type=as.data.frame(Type)
#输出图形
pdf(file="heatmap.pdf", width=10, height=5)
pheatmap(hmExp, 
         annotation=Type, 
         color = colorRampPalette(c("blue", "white", "red"))(50),
         cluster_cols =F,
         show_colnames = F,
         scale="row",
         fontsize = 8,
         fontsize_row=6,
         fontsize_col=8)
dev.off()


Fig.2 CDC25A clinical data from GSE21653

(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix.txt";	#输入文件名
my $gplFile="GPL570-55999.txt";	#平台文件名
my $expFileWF="probe.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);

(R studio)

library("survival")
library("survminer")
library("gridtext")

setwd("D:\\GEO data\\GSE21653_series_matrix.txt")
#读入生存数据
cli=read.table("timedfs.txt", header= T,sep="\t",check.names= F, row.names = 1)
#生存时间以年为单位
cli$time=cli$time/12


#读取输入文件
data=read.table("probe.txt", header= T,sep="\t",check.names= F, row.names = 1, quote = '')
#转化为matrix
dimnames= list(rownames(data),colnames(data))
data=matrix(as.numeric(as.matrix(data)),nrow=nrow(data),dimnames = dimnames)
#转置
data=t(data)
#因为生存数据只保留前12个字符，故样本名仅保留前12个字符
#rownames(data)=substr(rownames(data),1,12)

#将，改为-。gsub用于替换
#rownames(data)=gsub("[.]","-",rownames(data))

#取共有的样本进行合并
#获取共同样本
sameSample=intersect(row.names(data),row.names(cli))
#提取共同样本
data=data[sameSample,]
cli=cli[sameSample,]

#合并
rt=cbind(cli,data)

#取最适cutoff值
res.cut <- surv_cutpoint(rt, #数据集
                         time = "time", #生存状态
                         event = "fustat", #生存时间
                         variables = c("CDC25A") #需要计算的数据列名
)
summary(res.cut) 

res.cat <- surv_categorize(res.cut)
head(res.cat)

fit <- survfit(Surv(time, fustat) ~CDC25A, data = res.cat)#拟合生存分析
#绘制生存曲线并显示P值
surPlot=ggsurvplot(fit,
           data = res.cat,
           risk.table = TRUE,
           pval = T)


#根据ABCA3表达量的中位值，把样品分为两组
group=ifelse(rt[,"CDC25A"]>quantile(rt[,"CDC25A"],seq(0,1,1/10))[2],"High","Low")
#group=ifelse(rt[,"ABCA3"]>quantile(rt[,"ABCA3"],seq(0,1,1/2))[2],"High","Low")
rt[,"group"]=group
length=length(levels(factor(group)))

#生存分析
diff=survdiff(Surv(time,fustat) ~group,data =rt)
pValue=1-pchisq(diff$chisq,df=length-1)
pValue=paste0("p=",sprintf("%.04f",pValue))
fit <- survfit(Surv(time,fustat)~group,data =rt)

#summary(fit):没有达到中位生存时间时可查看更多数据

#绘制生存曲线
#install.packages("survRM2")
library(survRM2)
library (survminer) 
library(ggplot2)
bioCol=c("Firebrick3","medium blue","#6E568C","#223D6C")
bioCol=bioCol[1:length]
surPlot=ggsurvplot(fit,
                   data=rt,
                   conf.int=F,
                   pval=pValue,
                   pval.size=5,
                   legend.title="CDC25A",
                   legned.labs=levels(factor(rt[,"group"])),
                   legend=c(0.5,0.225),
                   font.legend=10,
                   xlab="Time(years)",
                   ylab="DFS",#DRFS:distant-relapse free survival
                   break.time.by=2,
                   palette=bioCol,
                   surv.median.line = "hv",
                   risk.table=T,
                   cumevents=F,
                   risk.table.height=.3)
#输出图形
pdf(file = "CDC25A DFS survival 10分之1.pdf",width = 7,height = 5,onefile=FALSE)
print(surPlot)
dev.off()
#garbage <- dev.off()
 
Fig 2  the correlation analysis of miR-99a-5p and CDC25A
(1) obtain the miR-99a-5p expression data from GSE 22216
(2) obtain the CDC25A expression data from GSE 22219
(perl)
use strict;
use warnings;
print STDERR "gene symbol column number: ";
my $geneSymbolCol=<STDIN>;
chomp($geneSymbolCol);
$geneSymbolCol--;
my $expFile="matrix.txt";	#输入文件名
my $gplFile="GPL6098-11569.txt";	#平台文件名
my $expFileWF="probe.txt";	#输出的文件名
my %hash=();
my @sampleName=();

open(EXP,"$expFile") or die $!;
while(my $exp=<EXP>)
{
	next if ($exp=~/^(\n|\!)/);
	chomp($exp);
	if($.==1)
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#expArr;$i++)
		{
			my $singleName=$expArr[$i];
			$singleName=~s/\"//g;
			if($i==0)
			{
				push(@sampleName,"ID_REF");
			}
			else
			{
				my @singleArr=split(/\_|\./,$singleName);
				push(@sampleName,$singleArr[0]);
			}
		}
	}
	else
	{
		my @expArr=split(/\t/,$exp);
		for(my $i=0;$i<=$#sampleName;$i++)
		{
			$expArr[$i]=~s/\"//g;
			push(@{$hash{$sampleName[$i]}},$expArr[$i]);
		}
	}
}
close(EXP);

my %probeGeneHash=();

open(GPL,"$gplFile") or die $!;
while(my $gpl=<GPL>)
{
	next if($gpl=~/^(\#|ID|\!|\n)/);
	chomp($gpl);
	my @gplArr=split(/\t/,$gpl);
	if((exists $gplArr[$geneSymbolCol]) && ($gplArr[$geneSymbolCol] ne '') && ($gplArr[$geneSymbolCol] !~ /.+\s+.+/))
	{
		$gplArr[$geneSymbolCol]=~s/(.+?)\/\/\/(.+)/$1/g;
		$gplArr[$geneSymbolCol]=~s/\"//g;
		$probeGeneHash{$gplArr[0]}=$gplArr[$geneSymbolCol];
	}
}
close(GPL);

my @probeName=@{$hash{"ID_REF"}};
delete($hash{"ID_REF"});

my %geneListHash=();
my %sampleGeneExpHash=();
foreach my $key (keys %hash)
{
	my %geneAveHash=();
	my %geneCountHash=();
	my %geneSumHash=();
	my @valueArr=@{$hash{$key}};
	for(my $i=0;$i<=$#probeName;$i++)
	{
		if(exists $probeGeneHash{$probeName[$i]})
		{
			my $geneName=$probeGeneHash{$probeName[$i]};
			$geneListHash{$geneName}++;
			$geneCountHash{$geneName}++;
			$geneSumHash{$geneName}+=$valueArr[$i];
		}
	}
	foreach my $countKey (keys %geneCountHash)
	{
		$geneAveHash{$countKey}=$geneSumHash{$countKey}/$geneCountHash{$countKey};
	}
	$sampleGeneExpHash{$key}=\%geneAveHash;
}

open(WF,">$expFileWF") or die $!;
$sampleName[0]="geneNames";
print WF join("\t",@sampleName) . "\n";
foreach my $probeGeneValue (sort(keys %geneListHash))
{
	print WF $probeGeneValue . "\t";
	for(my $i=1;$i<$#sampleName;$i++)
	{
		print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\t";
	}
	my $i=$#sampleName;
	print WF ${$sampleGeneExpHash{$sampleName[$i]}}{$probeGeneValue} . "\n";
}
close(WF);

(3) miR-99a-5p and CDC25A are matched one by one according to the data from GSE22220, then analyzed by spearman r.


